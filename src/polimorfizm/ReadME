Полиморфизма можно добится как с помощью наследования так и использованием интерфэйсов.При наследовании super
class один а наследников много с индивидуальной реализацией поведения в каждом из наследников.
SuperClass ob=new Naslednik#1();<--поведение и поля одни(состояние)
SuperClass ob=new Naslednik#2();<--поведение и поля другие

В интерфейсе у каждого Class своя реализация интерфейса(методоа интерфейса). опять же получаем разное поведение
и поля у каждого класса.

Построение и проектирование иерархии объектов на основе интерфейсов и наследовании классов является обязательным
условием для выполнения принципа полиморфизма ООП. А вернее на переопределении методов (т.е. поведения).
Требования к объявлению методов в super классах, чтобы не нарушался принцип
полиморфизма. Тут все просто: эти методы не должны быть static, private и final.
* Рrivate делает метод доступным только в классе, и вы не сможете его переопределить в наследнике.
** Static делает метод достоянием класса, а не объекта, поэтому всегда будет вызываться метод суперкласса.
*** Final же сделает метод неизменяемым и скрытым от наследников.